' -*- mode: Fundamental; compile-command: "./generate.bash" -*-
@startuml
!theme cyborg
skinparam backgroundColor black
skinparam dpi 300

package "zam" {
	interface task {
		get_next_runtime(self) -> Optional[datetime]
		run(self) -> None
		{static} run_tasks(tasks: typing.List[task]) -> None
	}

	interface snapshot {
		__lt__(self, other) // for sorting & breaking ties in creation_time
		__str__(self) // for logs
		creation_time: datetime // necessary for snapshot_task scheduling
	}

	class zfs_snapshot {
		__lt__(self, other)
		__str__(self)
		creation_time: datetime
		guid: ???
	}
	zfs_snapshot -up-|> snapshot

	interface snapshoter {
		get_snapshots(self) -> set[snapshot]
		take_snapshot(self) -> snapshot
	}

	class snapshot_task {
		__init__(self, snapshoter:snapshoter, period:timedelta)
		get_next_runtime(self)
		run(self)
	}

	snapshot_task -up-|> task
	snapshot_task -- snapshoter

	interface replicator {
		get_snapshots(self) -> set[snapshot]
		get_remote_snapshots(self, location:replication_location)
		replicate(self, location:replication_location, set[snapshot])
	}

	interface replication_location {
		__str__(self) // for logging
	}

	class replication_task {
		__init__(self, replicator:replicator, dest:replication_location, filter:prune_strategy, period:timedelta)
		get_next_runtime(self)
		run(self)

		' implementation is something like this:
		'     local = replicator.get_snapshots()
		'     remote = replicator.get_remote_snapshots(dest)
		'
		'     start_time = max(map(lambda snapshot: snapshot.datetime, remote))
		'     local = filter out all snapshots from local that are start_time or older
		'     snapshots_to_replicate = union(local, remote) ' pretend to upload everything
		'     snapshots_to_replicate = prune_strategy.filter(snapshots_to_replicate)
		'     snapshots_to_replicate = snapshots_to_replicate - remote
		'     replicator.replicate(snapshots_to_replicate, dest)
	}

	replication_task -up-|> task
	replication_task -- replicator
	replication_task -- replication_location
	replication_task -- prune_strategy

	class prune_task {
		__init__(self, pruner:pruner, strategy:prune_strategy)
		get_next_runtime(self) // smart; not just run on a loop
		run(self)
	}

	interface prune_strategy {
		prune(self, set[snapshot]) -> set[snapshot]
	}

	interface pruner {
		delete_snapshots(self) -> set[snapshot]
		get_snapshots(self) -> set[snapshot]
	}

	prune_task -up-|> task
	prune_task -- pruner
	prune_task -- prune_strategy

	class bucket {
		'This probably shouldn't be a separate class
		max_age: typing.Optional[datetime.timedelta]
		period: datetime.timedelta
	}

	class bucket_prune {
		__init__(self, buckets:List[bucket])
		prune(self, set[snapshot]) -> set[snapshot]
		' algorith is something like:
		' keepers = set()
		' for each bucket:
		'     snapshots = get all snapshots inside bucket as well as closest neighbors on left and right
		'     keeper snapshots[0] if it's closer to the start of the bucket than snapshots[1]
		'     for snapshot in snapshots:
		'         ???
		'     keeper snapshots[-1] if it's closer to the end of the bucket than snapshots[-2]
	}
	bucket_prune -up-|> prune_strategy
	bucket_prune -- bucket

	class zfs_location {
		__init__(self, ssh_host:str, ssh_port:str, dataset:str)
		__str__(self)
		dataset:str
		ssh_host:str
		ssh_port:str
	}
	zfs_location -up-|> replication_location

	class zfs_manager {
		__init__(self, location:Optional[zfs_location], ???) // location None -> localhost
		__wrap_command_in_ssh(self, command:List[str]) -> List[str] // return (self.location is None ? [] : [ssh, ${self.host}]) + command
		delete_snapshots(self) -> set[snapshot]
		get_remote_snapshots(self, location:replication_location) // Throws ~ErrorNotSupported if self.location is not None
		get_snapshots(self) -> set[snapshot]
		replicate(self, dest:replication_location, set[snapshot]) // assert dest isinstance zfs_location. Throws ~ErrorNotSupported if self.location is not None
		take_snapshot(self) -> snapshot
	}
	zfs_manager -up-|> pruner
	zfs_manager -up-|> replicator
	zfs_manager -up-|> snapshoter

	package "config" {
	}

	'TODO #17: there's still a lot missing
	'* Design config classes/json structure
}

@enduml
